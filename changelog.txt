changed the main (ARCv0.py now) file (a lot) to once again become singlecore
updated mapfile format to include ConeID column. map_loader.py was of course updated to accept both the new AND the previous types of mapfile, so all old ones should still work. I did this to make manual mapfile editing (like changing whether a cone is left or right) much easier and mapfiles less prone to error in general (note: requires small change to Map.py)
removed coneConnecterPresent, pathFinderPresent, pathPlanningPresent and SLAMPresent from all code, because those are assumed to always be true
small fixes drawDriverless and pygameUI and generalUI, but large changes (phasing out phantomMap???) are TBD
added 'applyUpdate' to simulatedCar.update() function and changed what it returns (from True to the posDiff, angle)
made simulatedLidar.py (which involved adding a .simVars to the Map class)
fixed simulatedLidar.py (because i messed up the un-drifted positions a bunch, and it's possible that lidarBlobsProcSimulated did as well...)
added mapSimVarClass to Map.py (to go in .simVars). this will store lidarSimVars and undetected cones
updated map_loader to store the cones in Map.simVars
the simCar object used for positionalDrift is now stored in the Map.simVars (instead of the within the masterMap.car)
added undiscoveredCones to simulate 'discovering' cones through (simulated) sensor data
removed phantomMap from code (and generalUI.py)
renamed drawQubicSplines to drawCubicSplines (because it's grammatically correct)
reworked drawCones() in drawDriverless.py to include undiscovered cones
reworked pygameUI mouse click logic (made it hopefully more legible) and incorporated undiscovered cones
small change in lidarBlobs(NoNumba) involving the way the cone position is calculated (just slightly faster math)
save undiscoveredCones to a second mapfile
in coneConnecting.py, changed coneConnectionThreshold to maxConnectionDist (becuase it more clearly exaplains its function)
also in coneConnecting.py, added printDebug boolean option to connectCone functions
added a dashed line function to drawDriverless (only in topdown, not 3D, for now)
changed the way mousecones are drawn in drawDriverless (using connectCone() with applyResult=False)
display loaded mapfile name in the corner of the screen
cone.slamData now has a struct (see SLAM_DIY.py) instead of being a list
added some speed timers to drawDriverless and discovered that drawCar runs like shit when sizeScale is very high
changed the way drawCar() works (again) to be a little more legible (now uses _drawCar() instead of being recursive)
pressing 'h' now toggles the (useless) headlights AND carPolygonMode, so that's nice
added mouse-position-based zooming (instead of center-of-screen zooming), to make using a trackpad a little easier (when you can't press on the scrollwheel to drag)
you can now press 'z' to switch between zooming modes (default is mouse-position-zooming)
moved 'timeSinceLastUpdate' into the Map.Car class, under the name: 'Car.lastUpdateTimestamp'
removed 'clockSet()' from Map class (it was not used anywhere (and it's a funky hack anyway))
add/update function comments (""" """) to all changes
changed the way drawMouseCone() works again (i realized you don't need a sub-function if you're usually passing the same thing)
BIG CHANGE: the cone lists are now in a dict called cone_lists, mapped to False and True for left and right respectively. (no more left_cone_list and right_cone_list)
fixed bug in simulatedLidar (and changed some stuff around), so lidarOffsets now work, AND you can turn off positionalDrift if you want.
added yet another drawConeSlamData mode, which just doesn't display how often the cone is seen (so you can actually see how well the lidar center pos is calculated)
BIG ADDITION: HWserialConn, HWserialLogging, realCar and realLidar all added (see also: plethora of arduino code that makes it work)
fixed high zoom FPS issues by (limiting zoom, and) ensuring the car (which takes very long to render when zoomed in a lot) is only rendered when actually in frame (allow me to inspect lidardata at my leasure)
added simulatedVision (bad positions, good color data) to help simulatedLidar do its thing
make use of the (now available) vision data in DIY_SLAM (note: preliminary! simulatedVision is pretty simple, i suspect the real camera will have a little more nuance)
made realLidar ready to test
massively increased defaultOverlapTolerance
removed Map.finish_line_cones in favor of a function that just searches the cone_lists. More CPU intensive, easier to program tho
realLidar lidarClass now stores self.carToUse to make the functions a little easier to read/use
made mainLog.py, which logs some general values (car positions and stuff)

in-progress:
temporarly set simulatedLidar and vision error to 0
SLAM_DIY change the way trust works to over- or undervalue newer/older cone positions AND how much SLAM can alter the car position

next up:
tune pathFollowingTemp
allow camera tilt (oh god, rendering math...)
another round of function labels """""" couldn't hurt
update target positions if cone positions change
extra support for bigger (finish?) and orange cones ? (at least drawing, i dont know about other stuff...)
delaunay triangulation testing (make a basic implementation and draw it, then we'll figure out what to do with it later)
make a fun new carSprite
basic DSP (filtering) on the steering?? idk man, it seems like there is a lot of predictable oscillation, maybe DSP will help (or not, if freq is too low)
button for toggling spline dots
3d render engine undiscovered cones and splines and all that (just more stuff in general?)
more efficient 3d rendering? (numpy/numba?)
automation (automatic first lap track construction)
pickle file map loading?
making 'simulation' a boolean in the map class??? (instead of having to check the contents of .simVar and whatnot)

note: lidar arduino blobs are still in MM, while blobs here are in meters (same unit as the rest of the code, makes things easier)

improved hardcoded auto-driving?
improved UI for making maps?